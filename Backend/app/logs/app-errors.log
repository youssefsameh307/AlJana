2023-04-16T11:47:37.334Z [ERROR]: Application error
2023-04-16T11:48:11.309Z [ERROR]: Application error
undefined
undefined
undefined
undefined
undefined
undefined
undefined
undefined
undefined
{"level":"error","message":"Application error","timestamp":"2023-04-16T11:50:30.252Z"}
{"level":"error","message":"Application error","timestamp":"2023-04-16T11:50:32.185Z"}
{"level":"error","message":"Application error","timestamp":"2023-04-16T11:50:49.415Z"}
{"level":"error","message":"Application error","timestamp":"2023-04-16T11:50:50.144Z"}
{"level":"error","message":"Application error","timestamp":"2023-04-16T11:51:32.980Z"}
{"level":"error","message":"Application error","timestamp":"2023-04-16T11:51:33.618Z"}
{
  level: 'error',
  message: 'Application error',
  metadata: { timestamp: '2023-04-16T11:51:54.385Z' }
}
{
  level: 'error',
  message: 'Application error',
  metadata: { timestamp: '2023-04-16T11:51:55.510Z' }
}
{
  level: 'error',
  message: 'Application error',
  metadata: { timestamp: '2023-04-16T11:51:56.223Z' }
}
{
  level: 'error',
  message: 'Application error',
  metadata: { timestamp: '2023-04-16T11:52:14.239Z' }
}
{
  level: 'error',
  message: 'Application error',
  metadata: { timestamp: '2023-04-16T11:53:46.217Z' }
}
{
  level: 'error',
  message: 'Application error',
  metadata: { timestamp: '2023-04-16T11:53:48.071Z' }
}
{
  level: 'error',
  message: 'Application error',
  metadata: { timestamp: '2023-04-16T11:53:52.360Z' }
}
{
  level: 'error',
  message: 'Application error',
  metadata: { timestamp: '2023-04-16T11:53:53.483Z' }
}
{
  level: 'error',
  message: 'Application error',
  metadata: { timestamp: '2023-04-16T11:53:57.350Z' }
}
{
  level: 'error',
  message: 'Application error',
  metadata: { timestamp: '2023-04-16T11:53:58.951Z' }
}
{
  level: 'error',
  message: 'Application error',
  metadata: { timestamp: '2023-04-16T11:53:59.387Z' }
}
{
  level: 'error',
  message: 'Application error',
  metadata: { timestamp: '2023-04-16T11:54:00.186Z' }
}
{
  level: 'error',
  message: 'Application error',
  metadata: { timestamp: '2023-04-16T11:56:27.089Z' }
}
{
  level: 'error',
  message: 'Application error',
  metadata: { timestamp: '2023-04-16T11:56:29.113Z' }
}
{
  level: 'error',
  message: 'Application error',
  metadata: { timestamp: '2023-04-16T11:56:53.332Z' }
}
{
  level: 'error',
  message: 'Application error',
  metadata: { timestamp: '2023-04-16T11:56:54.991Z' }
}
{
  level: 'error',
  message: 'Application error',
  metadata: { timestamp: '2023-04-16T12:02:40.115Z' }
}
{
  level: 'error',
  message: 'Application error',
  metadata: { timestamp: '2023-04-16T12:02:42.029Z' }
}
{
  level: 'error',
  message: 'Application error',
  metadata: { timestamp: '2023-04-16T12:02:43.122Z' }
}
{
  level: 'error',
  message: 'Application error',
  metadata: { timestamp: '2023-04-16T12:02:55.710Z' }
}
{
  level: 'error',
  message: 'Application error',
  metadata: { timestamp: '2023-04-16T12:02:57.268Z' }
}
{
  level: 'error',
  message: 'Application error',
  metadata: { timestamp: '2023-04-16T12:02:57.725Z' }
}
{
  level: 'error',
  message: 'Application error',
  metadata: { timestamp: '2023-04-16T12:04:48.579Z' }
}
{
  level: 'error',
  message: 'Application error',
  metadata: { timestamp: '2023-04-16T12:04:50.694Z' }
}
{
  level: 'error',
  message: 'Application error',
  metadata: { timestamp: '2023-04-16T12:04:55.794Z' }
}
{
  level: 'error',
  message: 'Application error',
  metadata: { timestamp: '2023-04-16T12:04:57.601Z' }
}
{
  level: 'error',
  message: 'Application error',
  metadata: { timestamp: '2023-04-16T12:05:00.110Z' }
}
{
  level: 'error',
  message: 'Application error',
  metadata: { timestamp: '2023-04-16T12:05:02.185Z' }
}
{
  level: 'error',
  message: 'Application error',
  metadata: { timestamp: '2023-04-16T12:06:43.236Z' }
}
{
  level: 'error',
  message: 'Application error',
  metadata: { timestamp: '2023-04-16T12:06:45.214Z' }
}
{
  level: 'error',
  message: 'Application error',
  metadata: { timestamp: '2023-04-16T12:06:46.227Z' }
}
{
  level: 'error',
  message: 'Application error',
  metadata: { timestamp: '2023-04-16T12:06:50.057Z' }
}
{
  level: 'error',
  message: 'Application error',
  metadata: { timestamp: '2023-04-16T12:06:50.753Z' }
}
{
  level: 'error',
  message: 'Application error',
  metadata: { timestamp: '2023-04-16T12:06:54.323Z' }
}
{
  level: 'error',
  message: 'Application error',
  metadata: { timestamp: '2023-04-16T12:06:56.051Z' }
}
{
  level: 'error',
  message: 'Application error',
  metadata: { timestamp: '2023-04-16T12:07:02.691Z' }
}
{
  level: 'error',
  message: 'Application error',
  metadata: { timestamp: '2023-04-16T12:07:03.892Z' }
}
{
  level: 'error',
  message: 'Application error',
  metadata: { timestamp: '2023-04-16T12:07:04.642Z' }
}
{
  level: 'error',
  message: 'Application error',
  metadata: { timestamp: '2023-04-16T12:07:13.490Z' }
}
{
  level: 'error',
  message: 'Application error',
  metadata: { timestamp: '2023-04-16T12:07:15.637Z' }
}
{
  level: 'error',
  message: 'Application error',
  metadata: { timestamp: '2023-04-16T12:09:41.618Z' }
}
{
  level: 'error',
  message: 'Application error',
  metadata: { timestamp: '2023-04-16T12:09:41.800Z' }
}
{
  level: 'error',
  message: 'Application error',
  metadata: { timestamp: '2023-04-16T12:10:15.243Z' }
}
{
  level: 'error',
  message: 'Application error',
  metadata: { timestamp: '2023-04-16T12:10:17.224Z' }
}
{
  level: 'error',
  message: 'Application error',
  metadata: { timestamp: '2023-04-16T12:10:18.102Z' }
}
{
  level: 'error',
  message: 'Application error',
  metadata: { timestamp: '2023-04-16T12:10:20.380Z' }
}
{
  level: 'error',
  message: 'Application error',
  metadata: { timestamp: '2023-04-16T12:10:22.719Z' }
}
{
  level: 'error',
  message: 'Application error',
  metadata: { timestamp: '2023-04-16T12:13:06.823Z' }
}
{
  level: 'error',
  message: 'Application error',
  metadata: { timestamp: '2023-04-16T12:13:08.895Z' }
}
{
  level: 'error',
  message: 'Application error',
  metadata: { timestamp: '2023-04-16T12:13:39.810Z' }
}
{
  level: 'error',
  message: 'Application error',
  metadata: { timestamp: '2023-04-16T12:13:41.643Z' }
}
{
  level: 'error',
  message: 'Application error',
  metadata: { timestamp: '2023-04-16T12:13:45.315Z' }
}
{
  level: 'error',
  message: 'Application error',
  metadata: { timestamp: '2023-04-16T12:13:47.279Z' }
}
{
  level: 'error',
  message: 'Application error',
  metadata: { timestamp: '2023-04-16T12:13:50.441Z' }
}
{
  level: 'error',
  message: 'Application error',
  metadata: { timestamp: '2023-04-16T12:13:52.171Z' }
}
{
  level: 'error',
  message: 'Application error',
  metadata: { timestamp: '2023-04-16T12:13:52.449Z' }
}
{
  level: 'error',
  message: 'Application error',
  metadata: { timestamp: '2023-04-16T12:13:55.083Z' }
}
{
  level: 'error',
  message: 'Application error',
  metadata: { timestamp: '2023-04-16T12:13:57.166Z' }
}
{
  level: 'error',
  message: 'uncaughtException: mo is not defined\n' +
    'ReferenceError: mo is not defined\n' +
    '    at Object.<anonymous> (D:\\Desktop\\AlJana\\Backend\\app\\middleware\\logger.js:57:1)\n' +
    '    at Module._compile (node:internal/modules/cjs/loader:1159:14)\n' +
    '    at Module._extensions..js (node:internal/modules/cjs/loader:1213:10)\n' +
    '    at Module.load (node:internal/modules/cjs/loader:1037:32)\n' +
    '    at Module._load (node:internal/modules/cjs/loader:878:12)\n' +
    '    at Module.require (node:internal/modules/cjs/loader:1061:19)\n' +
    '    at require (node:internal/modules/cjs/helpers:103:18)\n' +
    '    at Object.<anonymous> (D:\\Desktop\\AlJana\\Backend\\app\\app.js:30:16)\n' +
    '    at Module._compile (node:internal/modules/cjs/loader:1159:14)\n' +
    '    at Module._extensions..js (node:internal/modules/cjs/loader:1213:10)',
  metadata: {
    error: ReferenceError: mo is not defined
        at Object.<anonymous> (D:\Desktop\AlJana\Backend\app\middleware\logger.js:57:1)
        at Module._compile (node:internal/modules/cjs/loader:1159:14)
        at Module._extensions..js (node:internal/modules/cjs/loader:1213:10)
        at Module.load (node:internal/modules/cjs/loader:1037:32)
        at Module._load (node:internal/modules/cjs/loader:878:12)
        at Module.require (node:internal/modules/cjs/loader:1061:19)
        at require (node:internal/modules/cjs/helpers:103:18)
        at Object.<anonymous> (D:\Desktop\AlJana\Backend\app\app.js:30:16)
        at Module._compile (node:internal/modules/cjs/loader:1159:14)
        at Module._extensions..js (node:internal/modules/cjs/loader:1213:10),
    stack: 'ReferenceError: mo is not defined\n' +
      '    at Object.<anonymous> (D:\\Desktop\\AlJana\\Backend\\app\\middleware\\logger.js:57:1)\n' +
      '    at Module._compile (node:internal/modules/cjs/loader:1159:14)\n' +
      '    at Module._extensions..js (node:internal/modules/cjs/loader:1213:10)\n' +
      '    at Module.load (node:internal/modules/cjs/loader:1037:32)\n' +
      '    at Module._load (node:internal/modules/cjs/loader:878:12)\n' +
      '    at Module.require (node:internal/modules/cjs/loader:1061:19)\n' +
      '    at require (node:internal/modules/cjs/helpers:103:18)\n' +
      '    at Object.<anonymous> (D:\\Desktop\\AlJana\\Backend\\app\\app.js:30:16)\n' +
      '    at Module._compile (node:internal/modules/cjs/loader:1159:14)\n' +
      '    at Module._extensions..js (node:internal/modules/cjs/loader:1213:10)',
    exception: true,
    date: 'Sun Apr 16 2023 14:14:23 GMT+0200 (Eastern European Standard Time)',
    process: {
      pid: 15200,
      uid: null,
      gid: null,
      cwd: 'D:\\Desktop\\AlJana\\Backend\\app',
      execPath: 'C:\\Program Files\\nodejs\\node.exe',
      version: 'v18.12.1',
      argv: [
        'C:\\Program Files\\nodejs\\node.exe',
        'D:\\Desktop\\AlJana\\Backend\\app\\bin\\www'
      ],
      memoryUsage: {
        rss: 64471040,
        heapTotal: 33972224,
        heapUsed: 21501416,
        external: 19629975,
        arrayBuffers: 18720483
      }
    },
    os: { loadavg: [ 0, 0, 0 ], uptime: 379832 },
    trace: [
      {
        column: 1,
        file: 'D:\\Desktop\\AlJana\\Backend\\app\\middleware\\logger.js',
        function: null,
        line: 57,
        method: null,
        native: false
      },
      {
        column: 14,
        file: 'node:internal/modules/cjs/loader',
        function: 'Module._compile',
        line: 1159,
        method: '_compile',
        native: false
      },
      {
        column: 10,
        file: 'node:internal/modules/cjs/loader',
        function: 'Module._extensions..js',
        line: 1213,
        method: '.js',
        native: false
      },
      {
        column: 32,
        file: 'node:internal/modules/cjs/loader',
        function: 'Module.load',
        line: 1037,
        method: 'load',
        native: false
      },
      {
        column: 12,
        file: 'node:internal/modules/cjs/loader',
        function: 'Module._load',
        line: 878,
        method: '_load',
        native: false
      },
      {
        column: 19,
        file: 'node:internal/modules/cjs/loader',
        function: 'Module.require',
        line: 1061,
        method: 'require',
        native: false
      },
      {
        column: 18,
        file: 'node:internal/modules/cjs/helpers',
        function: 'require',
        line: 103,
        method: null,
        native: false
      },
      {
        column: 16,
        file: 'D:\\Desktop\\AlJana\\Backend\\app\\app.js',
        function: null,
        line: 30,
        method: null,
        native: false
      },
      {
        column: 14,
        file: 'node:internal/modules/cjs/loader',
        function: 'Module._compile',
        line: 1159,
        method: '_compile',
        native: false
      },
      {
        column: 10,
        file: 'node:internal/modules/cjs/loader',
        function: 'Module._extensions..js',
        line: 1213,
        method: '.js',
        native: false
      }
    ],
    timestamp: '2023-04-16T12:14:23.440Z'
  }
}
{
  level: 'error',
  message: 'HTTP GET /users',
  metadata: {
    meta: {
      req: {
        url: '/users',
        headers: {
          host: '127.0.0.1:53747',
          'accept-encoding': 'gzip, deflate',
          connection: 'close'
        },
        method: 'GET',
        httpVersion: '1.1',
        originalUrl: '/users',
        query: {}
      },
      res: { statusCode: 500 },
      responseTime: 399
    },
    timestamp: '2023-04-16T12:14:28.949Z'
  }
}
{
  level: 'error',
  message: 'HTTP GET /users',
  metadata: {
    meta: {
      req: {
        url: '/users',
        headers: {
          host: '127.0.0.1:53961',
          'accept-encoding': 'gzip, deflate',
          connection: 'close'
        },
        method: 'GET',
        httpVersion: '1.1',
        originalUrl: '/users',
        query: {}
      },
      res: { statusCode: 500 },
      responseTime: 413
    },
    timestamp: '2023-04-16T12:16:47.974Z'
  }
}
{
  level: 'error',
  message: 'HTTP GET /users',
  metadata: {
    meta: {
      req: {
        url: '/users',
        headers: {
          host: '127.0.0.1:54010',
          'accept-encoding': 'gzip, deflate',
          connection: 'close'
        },
        method: 'GET',
        httpVersion: '1.1',
        originalUrl: '/users',
        query: {}
      },
      res: { statusCode: 500 },
      responseTime: 377
    },
    timestamp: '2023-04-16T12:17:09.086Z'
  }
}
{
  level: 'error',
  message: 'HTTP GET /users',
  metadata: {
    meta: {
      req: {
        url: '/users',
        headers: {
          host: '127.0.0.1:54121',
          'accept-encoding': 'gzip, deflate',
          connection: 'close'
        },
        method: 'GET',
        httpVersion: '1.1',
        originalUrl: '/users',
        query: {}
      },
      res: { statusCode: 500 },
      responseTime: 513
    },
    timestamp: '2023-04-16T12:18:32.682Z'
  }
}
{
  level: 'error',
  message: 'HTTP GET /users',
  metadata: {
    meta: {
      req: {
        url: '/users',
        headers: {
          host: '127.0.0.1:54144',
          'accept-encoding': 'gzip, deflate',
          connection: 'close'
        },
        method: 'GET',
        httpVersion: '1.1',
        originalUrl: '/users',
        query: {}
      },
      res: { statusCode: 500 },
      responseTime: 394
    },
    timestamp: '2023-04-16T12:18:43.281Z'
  }
}
{
  level: 'error',
  message: 'HTTP GET /users',
  metadata: {
    meta: {
      req: {
        url: '/users',
        headers: {
          host: '127.0.0.1:54183',
          'accept-encoding': 'gzip, deflate',
          connection: 'close'
        },
        method: 'GET',
        httpVersion: '1.1',
        originalUrl: '/users',
        query: {}
      },
      res: { statusCode: 500 },
      responseTime: 406
    },
    timestamp: '2023-04-16T12:19:08.164Z'
  }
}
{
  level: 'error',
  message: 'HTTP GET /users',
  metadata: {
    meta: {
      req: {
        url: '/users',
        headers: {
          host: '127.0.0.1:54262',
          'accept-encoding': 'gzip, deflate',
          connection: 'close'
        },
        method: 'GET',
        httpVersion: '1.1',
        originalUrl: '/users',
        query: {}
      },
      res: { statusCode: 500 },
      responseTime: 381
    },
    timestamp: '2023-04-16T12:19:39.079Z'
  }
}
{
  level: 'error',
  message: 'HTTP GET /users',
  metadata: {
    meta: {
      req: {
        url: '/users',
        headers: {
          host: '127.0.0.1:54290',
          'accept-encoding': 'gzip, deflate',
          connection: 'close'
        },
        method: 'GET',
        httpVersion: '1.1',
        originalUrl: '/users',
        query: {}
      },
      res: { statusCode: 500 },
      responseTime: 433
    },
    timestamp: '2023-04-16T12:19:54.293Z'
  }
}
{
  level: 'error',
  message: 'HTTP GET /users',
  metadata: {
    meta: {
      req: {
        url: '/users',
        headers: {
          host: '127.0.0.1:54306',
          'accept-encoding': 'gzip, deflate',
          connection: 'close'
        },
        method: 'GET',
        httpVersion: '1.1',
        originalUrl: '/users',
        query: {}
      },
      res: { statusCode: 500 },
      responseTime: 391
    },
    timestamp: '2023-04-16T12:19:58.893Z'
  }
}
{
  level: 'error',
  message: 'HTTP GET /users',
  metadata: {
    meta: {
      req: {
        url: '/users',
        headers: {
          host: '127.0.0.1:54354',
          'accept-encoding': 'gzip, deflate',
          connection: 'close'
        },
        method: 'GET',
        httpVersion: '1.1',
        originalUrl: '/users',
        query: {}
      },
      res: { statusCode: 500 },
      responseTime: 365
    },
    timestamp: '2023-04-16T12:20:24.267Z'
  }
}
{
  level: 'error',
  message: 'HTTP GET /users',
  metadata: {
    meta: {
      req: {
        url: '/users',
        headers: {
          host: '127.0.0.1:54388',
          'accept-encoding': 'gzip, deflate',
          connection: 'close'
        },
        method: 'GET',
        httpVersion: '1.1',
        originalUrl: '/users',
        query: {}
      },
      res: { statusCode: 500 },
      responseTime: 684
    },
    timestamp: '2023-04-16T12:20:33.282Z'
  }
}
{
  level: 'error',
  message: 'HTTP GET /users',
  metadata: {
    meta: {
      req: {
        url: '/users',
        headers: {
          host: '127.0.0.1:54414',
          'accept-encoding': 'gzip, deflate',
          connection: 'close'
        },
        method: 'GET',
        httpVersion: '1.1',
        originalUrl: '/users',
        query: {}
      },
      res: { statusCode: 500 },
      responseTime: 508
    },
    timestamp: '2023-04-16T12:20:38.389Z'
  }
}
{
  level: 'error',
  message: 'HTTP GET /users',
  metadata: {
    meta: {
      req: {
        url: '/users',
        headers: {
          host: '127.0.0.1:54436',
          'accept-encoding': 'gzip, deflate',
          connection: 'close'
        },
        method: 'GET',
        httpVersion: '1.1',
        originalUrl: '/users',
        query: {}
      },
      res: { statusCode: 500 },
      responseTime: 507
    },
    timestamp: '2023-04-16T12:20:42.641Z'
  }
}
{
  level: 'error',
  message: 'HTTP GET /users',
  metadata: {
    meta: {
      req: {
        url: '/users',
        headers: {
          host: '127.0.0.1:54458',
          'accept-encoding': 'gzip, deflate',
          connection: 'close'
        },
        method: 'GET',
        httpVersion: '1.1',
        originalUrl: '/users',
        query: {}
      },
      res: { statusCode: 500 },
      responseTime: 427
    },
    timestamp: '2023-04-16T12:20:52.392Z'
  }
}
{
  level: 'error',
  message: 'HTTP GET /users',
  metadata: {
    meta: {
      req: {
        url: '/users',
        headers: {
          host: '127.0.0.1:54496',
          'accept-encoding': 'gzip, deflate',
          connection: 'close'
        },
        method: 'GET',
        httpVersion: '1.1',
        originalUrl: '/users',
        query: {}
      },
      res: { statusCode: 500 },
      responseTime: 372
    },
    timestamp: '2023-04-16T12:21:17.482Z'
  }
}
